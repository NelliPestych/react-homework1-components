{"version":3,"sources":["Profile.module.css","FriendList.module.css","Stats.module.css","logo.svg","Trans.module.css","App.js","serviceWorker.js","2.js","3.js","4.js","1.js","index.js"],"names":["module","exports","App","className","src","logo","alt","href","target","rel","Boolean","window","location","hostname","match","Statistics","title","stats","styles","statistics","statList","map","stat","key","id","item","statLabel","label","percentage","FriendList","friends","friendList","friend","isOnline","statusIsOnline","statusIsOffline","status","avatar","width","name","listItems","transactions","transaction","type","amount","currency","TransactionHistory","items","transactionHistory","Profile","tag","profile","description","quantity","followers","views","likes","defaultProps","ReactDOM","render","StrictMode","document","getElementById","user","statisticalData","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7f585dbf.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__3cpOq\",\"description\":\"Profile_description__1SBe8\",\"avatar\":\"Profile_avatar__3kkXa\",\"name\":\"Profile_name__PUCgy\",\"tag\":\"Profile_tag__T7eDx\",\"location\":\"Profile_location__mIJA5\",\"stats\":\"Profile_stats__AlCs1\",\"label\":\"Profile_label__AgC-4\",\"quantity\":\"Profile_quantity__1sKsL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"friendList\":\"FriendList_friendList__1AbR0\",\"statusIsOnline\":\"FriendList_statusIsOnline__3vGeq\",\"statusIsOffline\":\"FriendList_statusIsOffline__JSQZb\",\"item\":\"FriendList_item__1eUzt\",\"avatar\":\"FriendList_avatar__VN4ct\",\"name\":\"FriendList_name__J_rNY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"statistics\":\"Stats_statistics__3_uRp\",\"title\":\"Stats_title__3ABeu\",\"statlist\":\"Stats_statlist__25lTf\",\"item\":\"Stats_item__JmiIA\",\"statLabel\":\"Stats_statLabel__1ZFRh\",\"percentage\":\"Stats_percentage__26Kbc\"};","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"transactionHistory\":\"Trans_transactionHistory__333nH\"};","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\n// import ReactDOM from \"react-dom\";\n// import \"./index.css\";\n// import App from \"./App\";\n// import * as serviceWorker from \"./serviceWorker\";\n// import statisticalData from \"./statistical-data.json\";\nimport styles from \"./Stats.module.css\";\nimport PropTypes from \"prop-types\";\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById(\"root\")\n// );\n\nconst Statistics = ({ title, stats }) => (\n  <section className={styles.statistics}>\n    <h2 className={styles.title}>{title}</h2>\n    <ul className={styles.statList}>\n      {stats.map((stat) => (\n        <li key={stat.id} className={styles.item}>\n          <span className={styles.statLabel}>{stat.label}</span>\n          <span className={styles.percentage}>{stat.percentage}%</span>\n        </li>\n      ))}\n    </ul>\n  </section>\n);\n\n// Profile.defaultProps = {\n//   avatar: 'https://s3.amazonaws.com/uifaces/faces/twitter/r_oy/128.jpg',\n// };\n\nStatistics.propTypes = {\n  title: PropTypes.string,\n  stats: PropTypes.array.isRequired,\n};\n\nexport default Statistics;\n\n// ReactDOM.render(\n//   <Statistics title=\"Upload stats\" stats={statisticalData} />,\n//   document.getElementById(\"root\")\n// );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n","import React from \"react\";\n// import ReactDOM from \"react-dom\";\n// import \"./index.css\";\n// import App from \"./App\";\n// import * as serviceWorker from \"./serviceWorker\";\n// import friends from \"./friends.json\";\nimport styles from \"./FriendList.module.css\";\nimport PropTypes from \"prop-types\";\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById(\"root\")\n// );\n\nconst FriendList = ({ friends }) => (\n  <ul className={styles.friendList}>\n    {friends.map((friend) => (\n      <li key={friend.id} className={styles.item}>\n        {friend.isOnline ? (\n          <span className={styles.statusIsOnline}></span>\n        ) : (\n          <span className={styles.statusIsOffline}></span>\n        )}\n        <span className={styles.status}></span>\n        <img className={styles.avatar} src={friend.avatar} alt=\"\" width=\"48\" />\n        <p className={styles.name}>{friend.name}</p>\n      </li>\n    ))}\n  </ul>\n);\n\n// const FriendListItem = ({ friends }) => (\n\n// );\n\n// Profile.defaultProps = {\n//   avatar: 'https://s3.amazonaws.com/uifaces/faces/twitter/r_oy/128.jpg',\n// };\n\nFriendList.propTypes = {\n  friends: PropTypes.array.isRequired,\n};\n\nexport default FriendList;\n\n// ReactDOM.render(\n//   <FriendList friends={friends} />,\n//   document.getElementById(\"root\")\n// );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n","import React from \"react\";\n// import ReactDOM from \"react-dom\";\n// import \"./index.css\";\n// import App from \"./App\";\n// import * as serviceWorker from \"./serviceWorker\";\n// import transactions from \"./transactions.json\";\nimport styles from \"./Trans.module.css\";\nimport PropTypes from \"prop-types\";\nimport transactions from \"./transactions.json\";\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById(\"root\")\n// );\n\nconst TransactionHistory = ({ items }) => (\n  <table className={styles.transactionHistory}>\n    <thead>\n      <tr>\n        <th>Type</th>\n        <th>Amount</th>\n        <th>Currency</th>\n      </tr>\n    </thead>\n    <tbody>\n        {listItems}\n    </tbody>\n  </table>\n);\n\nconst listItems = transactions.map((transaction) => (\n  <tr key={transaction.id}>\n    <td>{transaction.type}</td>\n    <td>{transaction.amount}</td>\n    <td>{transaction.currency}</td>\n  </tr>\n))\n\n// Profile.defaultProps = {\n//   avatar: \"https://s3.amazonaws.com/uifaces/faces/twitter/r_oy/128.jpg\",\n// };\n\nTransactionHistory.propTypes = {\n items: PropTypes.array.isRequired,\n//   name: PropTypes.string.isRequired,\n//   stats: PropTypes.number.isRequired,\n//   tag: PropTypes.string.isRequired,\n//   location: PropTypes.string.isRequired,\n};\n\nexport default TransactionHistory;\n\n// ReactDOM.render(\n//   <TransactionHistory items={transactions} />,\n//   document.getElementById(\"root\")\n// );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n","import React from \"react\";\n// import ReactDOM from \"react-dom\";\n// import \"./index.css\";\n// import App from \"./App\";\n// import * as serviceWorker from \"./serviceWorker\";\n// import user from \"./user.json\";\nimport styles from \"./Profile.module.css\";\nimport PropTypes from \"prop-types\";\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById(\"root\")\n// );\n\nconst Profile = ({ name, tag, location, avatar, stats }) => (\n  <div className={styles.profile}>\n    <div className={styles.description}>\n      <img src={avatar} alt=\"user avatar\" className={styles.avatar} />\n      <p className={styles.name}>{name}</p>\n      <p className={styles.tag}>@{tag}</p>\n      <p className={styles.location}>{location}</p>\n    </div>\n\n    <ul className={styles.stats}>\n      <li>\n        <span className={styles.label}>Followers: </span>\n        <span className={styles.quantity}>{stats.followers}</span>\n      </li>\n      <li>\n        <span className={styles.label}>Views: </span>\n        <span className={styles.quantity}>{stats.views}</span>\n      </li>\n      <li>\n        <span className={styles.label}>Likes: </span>\n        <span className={styles.quantity}>{stats.likes}</span>\n      </li>\n    </ul>\n  </div>\n);\n\nProfile.defaultProps = {\n  avatar: \"https://s3.amazonaws.com/uifaces/faces/twitter/r_oy/128.jpg\",\n};\n\nProfile.propTypes = {\n  avatar: PropTypes.string,\n  name: PropTypes.string.isRequired,\n  stats: PropTypes.object.isRequired,\n  tag: PropTypes.string.isRequired,\n  location: PropTypes.string.isRequired,\n};\n\nexport default Profile;\n\n// ReactDOM.render(\n//   <Profile\n//     name={user.name}\n//     tag={user.tag}\n//     location={user.location}\n//     avatar={user.avatar}\n//     stats={user.stats}\n//   />,\n//   document.getElementById(\"root\")\n// );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport user from \"./user.json\";\nimport statisticalData from \"./statistical-data.json\";\nimport Statistics from \"./2\";\nimport friends from \"./friends.json\";\nimport FriendList from \"./3\";\nimport transactions from \"./transactions.json\";\nimport TransactionHistory from \"./4\";\nimport Profile from \"./1\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nReactDOM.render(\n  <div>\n    <Profile\n      name={user.name}\n      tag={user.tag}\n      location={user.location}\n      avatar={user.avatar}\n      stats={user.stats}\n    />\n    <Statistics title=\"Upload stats\" stats={statisticalData} />\n    <FriendList friends={friends} />\n    <TransactionHistory items={transactions} />\n  </div>,\n  document.getElementById(\"root\")\n);\n\n// ReactDOM.render(\n//   <Statistics title=\"Upload stats\" stats={statisticalData} />,\n//   document.getElementById(\"root\")\n// );\n\n// ReactDOM.render(\n//   <FriendList friends={friends} />,\n//   document.getElementById(\"root\")\n// );\n\n// ReactDOM.render(\n//   <TransactionHistory items={transactions} />,\n//   document.getElementById(\"root\")\n// );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}